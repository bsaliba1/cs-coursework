Answer questions 1-4 with the optimization set at its original value, "OPT=O0".

1. Scan through the x86Math.s and x86Math.objdump.txt files side by side.
	A. Do these two files contain similar sets of x86 instructions for the 
	   "add" function?
	- Yes they both contain a similar instruction set	   
	B. Do both files refer back to the original C code from which they were
	   derived?
	- Yes they both refer back to the original C code
	C. Does the gdb disassembly match the x86 instructions in both the .s  
	   and objdump files?
	- Yes it matches the x86 instructions and obj dump   
	D. Which format of all three do you find easier and why? 
	- I prefer the objdump because it is much easier to read

2. How many assembler instructions are required for:
	A. the "add" function :
	- 15 instructions		
	B. the "subtract" function:	
	- 14 instructions
3. How many bytes (in hex) are needed for the x86 version of the x86Math 
   program? (You can find this by scrolling to the bottom of file x86Math.s 
   and finding the offset associated with the last instruction in the file.)
   - 0x172
   
	
4. Find the x86 add instruction that adds op1+op2 in the add function.
	A. What line number is that instruction at in the x86Math.s file?
	- 159
	B. What hexadecimal address contains that instruction from the 
	   x86Math.objdump.txt file? 
	- 7eb
5. In gdb, just before you execute the instruction at 0x00005555555547eb for 
   the first time:
	A. What is the value in the "edx" register? 
	- 0
	B. What is the value in the "eax" register?
	- 4
	C. After you execute the instruction, what is the value in the "eax" 
	   register?
	- 4
Answer questions 6-8 with the optimization variable set to "OPT=O1" to do some 
optimization

6. Is it still possible to map directly from C code to x86 assembler 
   instructions? What has happened?
	- No it is no longer possible 	
7. In gdb, what x86 instruction is about to get executed when you reach the 
   first breakpoint in the "add" function?
	- sub $0x8, %rsp
	 
8. 	A. How many bytes are needed for this x86 version of the x86Math 
	   program? 
	- 0x86
	   
	B. How does this compare to the length of the previous version? 
	- It is much shorter than the previous version
	
	C. Why is there a difference?
	- Because rather than going into each function it does much of the arithmetic in main thus requiring less moves and no need for pushes and pops
	 
Answer questions 9-10 with the optimization value set to "OPT=O0 -DSIMPLE"

9. 	A. How many bytes are needed for this x86 version of the x86Math 
	   program?
	- 0x12a
	   
	B. How does this compare to previous versions?
	- It is longer than the previous version
	
	C. Does the gcc optimizer do a better job than a human in this case?
	- Yes it does because there are less bytes required for the gcc optimizer

10. Compare the x86 instructions for the add function with the x86 
    instructions for the add function in the first part of the lab. What is 
    the main difference?
	- It has slightly less instructions but it still does quite a few moves and still pushes and pops.